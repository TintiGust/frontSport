// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: seviw4mCkd31brNh8mWfE2
// Component: AMaLTj9dcue5
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  get as $stateGet,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: seviw4mCkd31brNh8mWfE2/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: AMaLTj9dcue5/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"exercise"}
          data-plasmic-override={overrides.exercise}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.exercise
          )}
        >
          <div className={classNames(projectcss.all, sty.columns__wmg2I)}>
            <div className={classNames(projectcss.all, sty.column___3NjzN)}>
              <AntdButton
                className={classNames("__wab_instance", sty.button___6VPgX)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zbO2D
                  )}
                >
                  {"start"}
                </div>
              </AntdButton>
            </div>
            <div className={classNames(projectcss.all, sty.column__xvZnE)}>
              <AntdButton
                className={classNames("__wab_instance", sty.button__zYhc)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tqWe9
                  )}
                >
                  {"stop"}
                </div>
              </AntdButton>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___5H75Z)}>
            <div className={classNames(projectcss.all, sty.columns__hFepg)}>
              <div className={classNames(projectcss.all, sty.column__yydzR)}>
                <div
                  data-plasmic-name={"weight"}
                  data-plasmic-override={overrides.weight}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.weight
                  )}
                >
                  {"50"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__nJn8)}>
                <div
                  data-plasmic-name={"ongoingMovement"}
                  data-plasmic-override={overrides.ongoingMovement}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.ongoingMovement
                  )}
                >
                  {"squat lest\u00e9"}
                </div>
                <div
                  data-plasmic-name={"timeout"}
                  data-plasmic-override={overrides.timeout}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.timeout
                  )}
                >
                  {"30 sec"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns___2DpF)}>
              <div className={classNames(projectcss.all, sty.column__b4Kji)}>
                <div
                  data-plasmic-name={"serie"}
                  data-plasmic-override={overrides.serie}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.serie
                  )}
                >
                  {"4 serie"}
                </div>
                <div
                  data-plasmic-name={"reps"}
                  data-plasmic-override={overrides.reps}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.reps
                  )}
                >
                  {"12 reps"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column___992M5)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r8OzG
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.counter;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__pHqi6)}>
            <div
              data-plasmic-name={"incomingExercise"}
              data-plasmic-override={overrides.incomingExercise}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.incomingExercise
              )}
            >
              {"soulev\u00e9 de terre jambe tendu"}
            </div>
            <div className={classNames(projectcss.all, sty.columns___3TAuy)}>
              <div className={classNames(projectcss.all, sty.column__cuwSt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d91Ma
                  )}
                >
                  {"50 kg"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column___04Hc1)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aNmUr
                  )}
                >
                  {"2x12"}
                </div>
              </div>
            </div>
          </div>
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={1}
            isRunning={false}
            onTick={async () => {
              const $steps = {};
              $steps["updateCounter"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["counter"]
                      },
                      operation: 3
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, oldValue - 1);
                      return oldValue - 1;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCounter"] != null &&
                typeof $steps["updateCounter"] === "object" &&
                typeof $steps["updateCounter"].then === "function"
              ) {
                $steps["updateCounter"] = await $steps["updateCounter"];
              }
            }}
            runWhileEditing={false}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  exercise: [
    "exercise",
    "weight",
    "ongoingMovement",
    "timeout",
    "serie",
    "reps",
    "incomingExercise",
    "timer"
  ],

  weight: ["weight"],
  ongoingMovement: ["ongoingMovement"],
  timeout: ["timeout"],
  serie: ["serie"],
  reps: ["reps"],
  incomingExercise: ["incomingExercise"],
  timer: ["timer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "exercise") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"seviw4mCkd31brNh8mWfE2"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "seviw4mCkd31brNh8mWfE2"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("exercise"))),
  {
    // Helper components rendering sub-elements
    weight: makeNodeComponent("weight"),
    ongoingMovement: makeNodeComponent("ongoingMovement"),
    timeout: makeNodeComponent("timeout"),
    serie: makeNodeComponent("serie"),
    reps: makeNodeComponent("reps"),
    incomingExercise: makeNodeComponent("incomingExercise"),
    timer: makeNodeComponent("timer"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
